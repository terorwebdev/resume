/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Renderer2 } from "@angular/core";
import { EventService } from "../../services/event.service";
var MatVideoSpinnerComponent = /** @class */ (function () {
    function MatVideoSpinnerComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.spinner = "spin";
        this.videoBuffering = false;
        this.events = [];
    }
    /**
     * @return {?}
     */
    MatVideoSpinnerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: "loadstart", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return (_this.videoBuffering = true); }), dispose: null },
            { element: this.video, name: "loadedmetadata", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return (_this.videoBuffering = false); }), dispose: null },
            { element: this.video, name: "playing", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return (_this.videoBuffering = false); }), dispose: null },
            { element: this.video, name: "waiting", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return (_this.videoBuffering = true); }), dispose: null },
            { element: this.video, name: "durationchange", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return (_this.videoBuffering = true); }), dispose: null }
        ];
        this.video.onloadeddata = (/**
         * @return {?}
         */
        function () { return (_this.videoBuffering = false); });
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatVideoSpinnerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.video.onloadeddata = null;
        this.evt.removeEvents(this.events);
    };
    MatVideoSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: "mat-video-spinner",
                    template: "<div *ngIf=\"videoBuffering\" [class]=\"spinner\"></div>\n",
                    styles: [":host{position:absolute;left:calc(50% - 32px);top:calc(50% - 32px);z-index:1}", ".spin{box-sizing:border-box;width:64px;height:64px;border-radius:100%;border:10px solid rgba(255,255,255,.2);border-top-color:#fff;-webkit-animation:1s linear infinite spin;animation:1s linear infinite spin}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}", ".dot{width:64px;height:64px;background-color:#fff;border-radius:100%;-webkit-animation:1s ease-in-out infinite dot;animation:1s ease-in-out infinite dot}@-webkit-keyframes dot{0%{-webkit-transform:scale(0)}100%{-webkit-transform:scale(1);opacity:0}}@keyframes dot{0%{transform:scale(0)}100%{transform:scale(1);opacity:0}}", ".split-ring{display:inline-block;width:64px;height:64px}.split-ring:after{content:\" \";display:block;width:46px;height:46px;margin:1px;border-radius:50%;border:5px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s linear infinite split-ring;animation:1.2s linear infinite split-ring}@-webkit-keyframes split-ring{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes split-ring{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}", ".hourglass{display:inline-block;position:relative;width:64px;height:64px}.hourglass:after{content:\" \";display:block;border-radius:50%;width:0;height:0;margin:6px;box-sizing:border-box;border:26px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s infinite hourglass;animation:1.2s infinite hourglass}@-webkit-keyframes hourglass{0%{-webkit-transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg)}}@keyframes hourglass{0%{transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{transform:rotate(720deg)}}"]
                }] }
    ];
    /** @nocollapse */
    MatVideoSpinnerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatVideoSpinnerComponent.propDecorators = {
        video: [{ type: Input }],
        spinner: [{ type: Input }]
    };
    return MatVideoSpinnerComponent;
}());
export { MatVideoSpinnerComponent };
if (false) {
    /** @type {?} */
    MatVideoSpinnerComponent.prototype.video;
    /** @type {?} */
    MatVideoSpinnerComponent.prototype.spinner;
    /** @type {?} */
    MatVideoSpinnerComponent.prototype.videoBuffering;
    /**
     * @type {?}
     * @private
     */
    MatVideoSpinnerComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    MatVideoSpinnerComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    MatVideoSpinnerComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXNwaW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0LXZpZGVvLyIsInNvdXJjZXMiOlsibGliL3VpL21hdC12aWRlby1zcGlubmVyL21hdC12aWRlby1zcGlubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd0RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFNUQ7SUFtQkUsa0NBQW9CLFFBQW1CLEVBQVUsR0FBaUI7UUFBOUMsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQWM7UUFOekQsWUFBTyxHQUFHLE1BQU0sQ0FBQztRQUUxQixtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUVmLFdBQU0sR0FBbUIsRUFBRSxDQUFDO0lBRWlDLENBQUM7Ozs7SUFFdEUsa0RBQWU7OztJQUFmO1FBQUEsaUJBWUM7UUFYQyxJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVE7Ozs7Z0JBQUUsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQTVCLENBQTRCLENBQUEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQzFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFFBQVE7Ozs7Z0JBQUUsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEVBQTdCLENBQTZCLENBQUEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ2hILEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFROzs7O2dCQUFFLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQyxLQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxFQUE3QixDQUE2QixDQUFBLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtZQUN6RyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUTs7OztnQkFBRSxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsS0FBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7WUFDeEcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUTs7OztnQkFBRSxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsS0FBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDaEgsQ0FBQztRQUVGLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWTs7O1FBQUcsY0FBTSxPQUFBLENBQUMsS0FBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQSxDQUFDO1FBRTlELElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFRCw4Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7O2dCQXZDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0Isc0VBQWlEOztpQkFRbEQ7Ozs7Z0JBZm9ELFNBQVM7Z0JBR3JELFlBQVk7Ozt3QkFjbEIsS0FBSzswQkFDTCxLQUFLOztJQTJCUiwrQkFBQztDQUFBLEFBeENELElBd0NDO1NBN0JZLHdCQUF3Qjs7O0lBQ25DLHlDQUFpQzs7SUFDakMsMkNBQTBCOztJQUUxQixrREFBdUI7Ozs7O0lBRXZCLDBDQUFvQzs7Ozs7SUFFeEIsNENBQTJCOzs7OztJQUFFLHVDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvZXZlbnQtaGFuZGxlci5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9ldmVudC5zZXJ2aWNlXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtYXQtdmlkZW8tc3Bpbm5lclwiLFxuICB0ZW1wbGF0ZVVybDogXCIuL21hdC12aWRlby1zcGlubmVyLmNvbXBvbmVudC5odG1sXCIsXG4gIHN0eWxlVXJsczogW1xuICAgIFwiLi9tYXQtdmlkZW8tc3Bpbm5lci5jb21wb25lbnQuc2Nzc1wiLFxuICAgIFwiLi9pbmRpY2F0b3JzL3NwaW4uc2Nzc1wiLFxuICAgIFwiLi9pbmRpY2F0b3JzL2RvdC5zY3NzXCIsXG4gICAgXCIuL2luZGljYXRvcnMvc3BsaXQtcmluZy5zY3NzXCIsXG4gICAgXCIuL2luZGljYXRvcnMvaG91cmdsYXNzLnNjc3NcIlxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE1hdFZpZGVvU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50O1xuICBASW5wdXQoKSBzcGlubmVyID0gXCJzcGluXCI7XG5cbiAgdmlkZW9CdWZmZXJpbmcgPSBmYWxzZTtcblxuICBwcml2YXRlIGV2ZW50czogRXZlbnRIYW5kbGVyW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZXZ0OiBFdmVudFNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRzID0gW1xuICAgICAgeyBlbGVtZW50OiB0aGlzLnZpZGVvLCBuYW1lOiBcImxvYWRzdGFydFwiLCBjYWxsYmFjazogZXZlbnQgPT4gKHRoaXMudmlkZW9CdWZmZXJpbmcgPSB0cnVlKSwgZGlzcG9zZTogbnVsbCB9LFxuICAgICAgeyBlbGVtZW50OiB0aGlzLnZpZGVvLCBuYW1lOiBcImxvYWRlZG1ldGFkYXRhXCIsIGNhbGxiYWNrOiBldmVudCA9PiAodGhpcy52aWRlb0J1ZmZlcmluZyA9IGZhbHNlKSwgZGlzcG9zZTogbnVsbCB9LFxuICAgICAgeyBlbGVtZW50OiB0aGlzLnZpZGVvLCBuYW1lOiBcInBsYXlpbmdcIiwgY2FsbGJhY2s6IGV2ZW50ID0+ICh0aGlzLnZpZGVvQnVmZmVyaW5nID0gZmFsc2UpLCBkaXNwb3NlOiBudWxsIH0sXG4gICAgICB7IGVsZW1lbnQ6IHRoaXMudmlkZW8sIG5hbWU6IFwid2FpdGluZ1wiLCBjYWxsYmFjazogZXZlbnQgPT4gKHRoaXMudmlkZW9CdWZmZXJpbmcgPSB0cnVlKSwgZGlzcG9zZTogbnVsbCB9LFxuICAgICAgeyBlbGVtZW50OiB0aGlzLnZpZGVvLCBuYW1lOiBcImR1cmF0aW9uY2hhbmdlXCIsIGNhbGxiYWNrOiBldmVudCA9PiAodGhpcy52aWRlb0J1ZmZlcmluZyA9IHRydWUpLCBkaXNwb3NlOiBudWxsIH1cbiAgICBdO1xuXG4gICAgdGhpcy52aWRlby5vbmxvYWRlZGRhdGEgPSAoKSA9PiAodGhpcy52aWRlb0J1ZmZlcmluZyA9IGZhbHNlKTtcblxuICAgIHRoaXMuZXZ0LmFkZEV2ZW50cyh0aGlzLnJlbmRlcmVyLCB0aGlzLmV2ZW50cyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnZpZGVvLm9ubG9hZGVkZGF0YSA9IG51bGw7XG5cbiAgICB0aGlzLmV2dC5yZW1vdmVFdmVudHModGhpcy5ldmVudHMpO1xuICB9XG59XG4iXX0=