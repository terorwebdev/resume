/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from "@angular/core";
import { EventService } from "./services/event.service";
var MatVideoComponent = /** @class */ (function () {
    function MatVideoComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.src = null;
        this.title = null;
        this.autoplay = false;
        this.preload = true;
        this.loop = false;
        this.quality = true;
        this.fullscreen = true;
        this.playsinline = false;
        this.showFrameByFrame = false;
        this.fps = 29.97;
        this.download = false;
        this.color = "primary";
        this.spinner = "spin";
        this.poster = null;
        this.keyboard = true;
        this.overlay = null;
        this.muted = false;
        this.mutedChange = new EventEmitter();
        this.timeChange = new EventEmitter();
        this.playing = false;
        this.isFullscreen = false;
        this.videoLoaded = false;
        this.isMouseMoving = false;
        this.isMouseMovingTimeout = 2000;
    }
    Object.defineProperty(MatVideoComponent.prototype, "time", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getVideoTag().currentTime;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            /** @type {?} */
            var video = this.getVideoTag();
            if (video && val) {
                if (val > video.duration) {
                    val = video.duration;
                }
                if (val < 0) {
                    val = 0;
                }
                if (Math.abs(val - video.currentTime) > 0.0001) {
                    video.currentTime = val;
                }
                if (Math.abs(this.lastTime - video.currentTime) > 0.0001) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { return _this.timeChange.emit(video.currentTime); }), 0);
                    this.lastTime = video.currentTime;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            {
                element: this.video.nativeElement,
                name: "loadstart",
                callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return (_this.videoLoaded = false); }),
                dispose: null
            },
            {
                element: this.video.nativeElement,
                name: "loadedmetadata",
                callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.evLoadedMetadata(event); }),
                dispose: null
            },
            {
                element: this.video.nativeElement,
                name: "error",
                callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return console.error("Unhandled Video Error", event); }),
                dispose: null
            },
            {
                element: this.video.nativeElement,
                name: "contextmenu",
                callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return event.preventDefault(); }),
                dispose: null
            },
            {
                element: this.video.nativeElement,
                name: "timeupdate",
                callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.evTimeUpdate(event); }),
                dispose: null
            },
            {
                element: this.player.nativeElement,
                name: "mousemove",
                callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.evMouseMove(event); }),
                dispose: null
            }
        ];
        this.video.nativeElement.onloadeddata = (/**
         * @return {?}
         */
        function () { return (_this.videoLoaded = true); });
        this.evt.addEvents(this.renderer, this.events);
        this.setVideoSrc(this.src);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVideoComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.src) {
            this.setVideoSrc(this.src);
        }
    };
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.video.nativeElement.onloadeddata = null;
        this.evt.removeEvents(this.events);
    };
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        if (this.video && this.video.nativeElement) {
            this.video.nativeElement.load();
        }
    };
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.getVideoTag = /**
     * @return {?}
     */
    function () {
        return this.video && this.video.nativeElement ? ((/** @type {?} */ (this.video.nativeElement))) : null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVideoComponent.prototype.evLoadedMetadata = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.videoWidth = this.video.nativeElement.videoWidth;
        this.videoHeight = this.video.nativeElement.videoHeight;
        this.videoLoaded = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVideoComponent.prototype.evMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.isMouseMoving = true;
        clearTimeout(this.isMouseMovingTimer);
        this.isMouseMovingTimer = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.isMouseMoving = false;
        }), this.isMouseMovingTimeout);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVideoComponent.prototype.evTimeUpdate = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.time = this.getVideoTag().currentTime;
    };
    /**
     * @param {?} activeClass
     * @param {?} inactiveClass
     * @return {?}
     */
    MatVideoComponent.prototype.getOverlayClass = /**
     * @param {?} activeClass
     * @param {?} inactiveClass
     * @return {?}
     */
    function (activeClass, inactiveClass) {
        if (this.overlay === null) {
            return !this.playing || this.isMouseMoving ? activeClass : inactiveClass;
        }
        else {
            return this.overlay ? activeClass : inactiveClass;
        }
    };
    /**
     * @private
     * @param {?} src
     * @return {?}
     */
    MatVideoComponent.prototype.setVideoSrc = /**
     * @private
     * @param {?} src
     * @return {?}
     */
    function (src) {
        if (this.srcObjectURL) {
            URL.revokeObjectURL(this.srcObjectURL);
            this.srcObjectURL = null;
        }
        if (!this.video || !this.video.nativeElement) {
            return;
        }
        if (!src) {
            this.video.nativeElement.src = null;
            if ("srcObject" in HTMLVideoElement.prototype) {
                this.video.nativeElement.srcObject = new MediaStream();
            }
        }
        else if (typeof src === "string") {
            this.video.nativeElement.src = src;
        }
        else if ("srcObject" in HTMLVideoElement.prototype) {
            this.video.nativeElement.srcObject = src;
        }
        else {
            this.srcObjectURL = URL.createObjectURL(src);
            this.video.nativeElement.src = this.srcObjectURL;
        }
        this.video.nativeElement.muted = this.muted;
    };
    MatVideoComponent.decorators = [
        { type: Component, args: [{
                    selector: "mat-video",
                    template: "<div #player class=\"videoplayer\" [ngClass]=\"getOverlayClass('show-mouse', 'hide-mouse')\">\n  <div class=\"header\" *ngIf=\"title\" [ngClass]=\"getOverlayClass('visible', 'hidden')\">\n    {{ title }}\n  </div>\n\n  <video\n    #video\n    class=\"video\"\n    [attr.autoplay]=\"autoplay ? true : null\"\n    [preload]=\"preload ? 'auto' : 'metadata'\"\n    [attr.poster]=\"poster ? poster : null\"\n    [attr.loop]=\"loop ? loop : null\"\n    [attr.playsinline]=\"playsinline ? true : null\"\n  >\n    <ng-content select=\"source\"></ng-content>\n    <ng-content select=\"track\"></ng-content>\n    This browser does not support HTML5 video.\n  </video>\n\n  <div class=\"controls\" *ngIf=\"videoLoaded\" [ngClass]=\"getOverlayClass('visible', 'hidden')\">\n    <div class=\"progress\">\n      <mat-seek-progress-control [color]=\"color\" [video]=\"video\"></mat-seek-progress-control>\n    </div>\n\n    <div class=\"menu\">\n      <div class=\"left\">\n        <mat-play-button (playChanged)=\"playing = $event\" [video]=\"video\" [keyboard]=\"keyboard\"> </mat-play-button>\n\n        <mat-frame-by-frame-control *ngIf=\"showFrameByFrame\" [video]=\"video\" [fps]=\"fps\"></mat-frame-by-frame-control>\n\n        <mat-volume-control\n          [muted]=\"muted\"\n          (mutedChanged)=\"muted = $event; mutedChange.emit(muted)\"\n          [color]=\"color\"\n          [video]=\"video\"\n          [keyboard]=\"keyboard\"\n        >\n        </mat-volume-control>\n\n        <mat-time-control [video]=\"video\"></mat-time-control>\n      </div>\n\n      <div class=\"right\">\n        <mat-quality-control *ngIf=\"quality\" [video]=\"video\"></mat-quality-control>\n\n        <mat-download-button *ngIf=\"download\" [title]=\"title\" [video]=\"video\"></mat-download-button>\n\n        <mat-fullscreen-button\n          *ngIf=\"fullscreen\"\n          (fullscreenChanged)=\"isFullscreen = $event\"\n          [player]=\"player\"\n          [keyboard]=\"keyboard\"\n        ></mat-fullscreen-button>\n      </div>\n    </div>\n  </div>\n\n  <mat-video-spinner [spinner]=\"spinner\" [video]=\"video\"></mat-video-spinner>\n</div>\n",
                    styles: [".videoplayer{font-family:Roboto,\"Helvetica Neue\",sans-serif;background-color:#000;position:relative;width:100%;height:100%}.header{color:#fff;display:flex;justify-content:center;align-items:center;position:absolute;left:0;top:0;padding:14px 0;width:100%;z-index:1;background-image:linear-gradient(to top,rgba(0,0,0,0),rgba(0,0,0,.65))}.video{display:block;width:100%;height:100%;z-index:0}.controls{color:#fff;position:absolute;left:0;bottom:0;width:100%;z-index:1;background-image:linear-gradient(to bottom,rgba(0,0,0,0),rgba(0,0,0,.65))}.controls .progress{height:26px}.controls .menu{display:flex;align-items:center;flex-direction:row;justify-content:space-between;height:48px}.controls .menu .left{justify-content:flex-start}.controls .menu .right{justify-content:flex-end}.visible{visibility:visible;opacity:1;transition:opacity .5s linear}.hidden{visibility:hidden;opacity:0;transition:visibility .5s,opacity .5s linear}.show-mouse{cursor:default}.hide-mouse{cursor:none}", "@font-face{font-family:\"Material Icons\";font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/materialicons/v36/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format(\"woff2\")}::ng-deep.material-icons{font-family:\"Material Icons\";font-weight:400;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;font-feature-settings:\"liga\";-webkit-font-feature-settings:\"liga\";-webkit-font-smoothing:antialiased}"]
                }] }
    ];
    /** @nocollapse */
    MatVideoComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatVideoComponent.propDecorators = {
        player: [{ type: ViewChild, args: ["player", { static: false },] }],
        video: [{ type: ViewChild, args: ["video", { static: false },] }],
        src: [{ type: Input }],
        title: [{ type: Input }],
        autoplay: [{ type: Input }],
        preload: [{ type: Input }],
        loop: [{ type: Input }],
        quality: [{ type: Input }],
        fullscreen: [{ type: Input }],
        playsinline: [{ type: Input }],
        showFrameByFrame: [{ type: Input }],
        fps: [{ type: Input }],
        download: [{ type: Input }],
        color: [{ type: Input }],
        spinner: [{ type: Input }],
        poster: [{ type: Input }],
        keyboard: [{ type: Input }],
        overlay: [{ type: Input }],
        muted: [{ type: Input }],
        mutedChange: [{ type: Output }],
        timeChange: [{ type: Output }],
        time: [{ type: Input }]
    };
    return MatVideoComponent;
}());
export { MatVideoComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.video;
    /** @type {?} */
    MatVideoComponent.prototype.src;
    /** @type {?} */
    MatVideoComponent.prototype.title;
    /** @type {?} */
    MatVideoComponent.prototype.autoplay;
    /** @type {?} */
    MatVideoComponent.prototype.preload;
    /** @type {?} */
    MatVideoComponent.prototype.loop;
    /** @type {?} */
    MatVideoComponent.prototype.quality;
    /** @type {?} */
    MatVideoComponent.prototype.fullscreen;
    /** @type {?} */
    MatVideoComponent.prototype.playsinline;
    /** @type {?} */
    MatVideoComponent.prototype.showFrameByFrame;
    /** @type {?} */
    MatVideoComponent.prototype.fps;
    /** @type {?} */
    MatVideoComponent.prototype.download;
    /** @type {?} */
    MatVideoComponent.prototype.color;
    /** @type {?} */
    MatVideoComponent.prototype.spinner;
    /** @type {?} */
    MatVideoComponent.prototype.poster;
    /** @type {?} */
    MatVideoComponent.prototype.keyboard;
    /** @type {?} */
    MatVideoComponent.prototype.overlay;
    /** @type {?} */
    MatVideoComponent.prototype.muted;
    /** @type {?} */
    MatVideoComponent.prototype.mutedChange;
    /** @type {?} */
    MatVideoComponent.prototype.timeChange;
    /** @type {?} */
    MatVideoComponent.prototype.playing;
    /** @type {?} */
    MatVideoComponent.prototype.isFullscreen;
    /** @type {?} */
    MatVideoComponent.prototype.videoWidth;
    /** @type {?} */
    MatVideoComponent.prototype.videoHeight;
    /** @type {?} */
    MatVideoComponent.prototype.lastTime;
    /** @type {?} */
    MatVideoComponent.prototype.videoLoaded;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.srcObjectURL;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.isMouseMoving;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.isMouseMovingTimer;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.isMouseMovingTimeout;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    MatVideoComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0LXZpZGVvLyIsInNvdXJjZXMiOlsibGliL3ZpZGVvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sU0FBUyxFQUVULFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQ7SUF3RUUsMkJBQW9CLFFBQW1CLEVBQVUsR0FBaUI7UUFBOUMsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQWM7UUEvRHpELFFBQUcsR0FBOEMsSUFBSSxDQUFDO1FBQ3RELFVBQUssR0FBVyxJQUFJLENBQUM7UUFDckIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUNiLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDZixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQUN6QixRQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ1osYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixVQUFLLEdBQWlCLFNBQVMsQ0FBQztRQUNoQyxZQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ2pCLFdBQU0sR0FBVyxJQUFJLENBQUM7UUFDdEIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixZQUFPLEdBQVksSUFBSSxDQUFDO1FBQ3hCLFVBQUssR0FBRyxLQUFLLENBQUM7UUFDYixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFMUMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUEwQmxELFlBQU8sR0FBRyxL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QUVyQix1Q0FBbUI7O0lBQ25CLHdDQUFvQjs7SUFDcEIscUNBQWlCOztJQUVqQix3Q0FBb0I7Ozs7O0lBRXBCLHlDQUE2Qjs7Ozs7SUFFN0IsMENBQThCOzs7OztJQUM5QiwrQ0FBeUM7Ozs7O0lBQ3pDLGlEQUFvQzs7Ozs7SUFFcEMsbUNBQStCOzs7OztJQUVuQixxQ0FBMkI7Ozs7O0lBQUUsZ0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE91dHB1dCxcclxuICBSZW5kZXJlcjIsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBWaWV3Q2hpbGRcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZVwiO1xyXG5cclxuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9ldmVudC1oYW5kbGVyLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9ldmVudC5zZXJ2aWNlXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogXCJtYXQtdmlkZW9cIixcclxuICB0ZW1wbGF0ZVVybDogXCIuL3ZpZGVvLmNvbXBvbmVudC5odG1sXCIsXHJcbiAgc3R5bGVVcmxzOiBbXCIuL3ZpZGVvLmNvbXBvbmVudC5zY3NzXCIsIFwiLi9zdHlsZXMvaWNvbnMuc2Nzc1wiXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWF0VmlkZW9Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgQFZpZXdDaGlsZChcInBsYXllclwiLCB7IHN0YXRpYzogZmFsc2UgfSkgcHJpdmF0ZSBwbGF5ZXI6IEVsZW1lbnRSZWY7XHJcbiAgQFZpZXdDaGlsZChcInZpZGVvXCIsIHsgc3RhdGljOiBmYWxzZSB9KSBwcml2YXRlIHZpZGVvOiBFbGVtZW50UmVmO1xyXG5cclxuICBASW5wdXQoKSBzcmM6IHN0cmluZyB8IE1lZGlhU3RyZWFtIHwgTWVkaWFTb3VyY2UgfCBCbG9iID0gbnVsbDtcclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nID0gbnVsbDtcclxuICBASW5wdXQoKSBhdXRvcGxheSA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIHByZWxvYWQgPSB0cnVlO1xyXG4gIEBJbnB1dCgpIGxvb3AgPSBmYWxzZTtcclxuICBASW5wdXQoKSBxdWFsaXR5ID0gdHJ1ZTtcclxuICBASW5wdXQoKSBmdWxsc2NyZWVuID0gdHJ1ZTtcclxuICBASW5wdXQoKSBwbGF5c2lubGluZSA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIHNob3dGcmFtZUJ5RnJhbWUgPSBmYWxzZTtcclxuICBASW5wdXQoKSBmcHMgPSAyOS45NztcclxuICBASW5wdXQoKSBkb3dubG9hZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGNvbG9yOiBUaGVtZVBhbGV0dGUgPSBcInByaW1hcnlcIjtcclxuICBASW5wdXQoKSBzcGlubmVyID0gXCJzcGluXCI7XHJcbiAgQElucHV0KCkgcG9zdGVyOiBzdHJpbmcgPSBudWxsO1xyXG4gIEBJbnB1dCgpIGtleWJvYXJkID0gdHJ1ZTtcclxuICBASW5wdXQoKSBvdmVybGF5OiBib29sZWFuID0gbnVsbDtcclxuICBASW5wdXQoKSBtdXRlZCA9IGZhbHNlO1xyXG4gIEBPdXRwdXQoKSBtdXRlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgQE91dHB1dCgpIHRpbWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuXHJcbiAgQElucHV0KClcclxuICBnZXQgdGltZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmdldFZpZGVvVGFnKCkuY3VycmVudFRpbWU7XHJcbiAgfVxyXG5cclxuICBzZXQgdGltZSh2YWw6IG51bWJlcikge1xyXG4gICAgY29uc3QgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvVGFnKCk7XHJcbiAgICBpZiAodmlkZW8gJiYgdmFsKSB7XHJcbiAgICAgIGlmICh2YWwgPiB2aWRlby5kdXJhdGlvbikge1xyXG4gICAgICAgIHZhbCA9IHZpZGVvLmR1cmF0aW9uO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh2YWwgPCAwKSB7XHJcbiAgICAgICAgdmFsID0gMDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTWF0aC5hYnModmFsIC0gdmlkZW8uY3VycmVudFRpbWUpID4gMC4wMDAxKSB7XHJcbiAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSB2YWw7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKE1hdGguYWJzKHRoaXMubGFzdFRpbWUgLSB2aWRlby5jdXJyZW50VGltZSkgPiAwLjAwMDEpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudGltZUNoYW5nZS5lbWl0KHZpZGVvLmN1cnJlbnRUaW1lKSwgMCk7XHJcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHZpZGVvLmN1cnJlbnRUaW1lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwbGF5aW5nID0gZmFsc2U7XHJcblxyXG4gIGlzRnVsbHNjcmVlbiA9IGZhbHNlO1xyXG5cclxuICB2aWRlb1dpZHRoOiBudW1iZXI7XHJcbiAgdmlkZW9IZWlnaHQ6IG51bWJlcjtcclxuICBsYXN0VGltZTogbnVtYmVyO1xyXG5cclxuICB2aWRlb0xvYWRlZCA9IGZhbHNlO1xyXG5cclxuICBwcml2YXRlIHNyY09iamVjdFVSTDogc3RyaW5nO1xyXG5cclxuICBwcml2YXRlIGlzTW91c2VNb3ZpbmcgPSBmYWxzZTtcclxuICBwcml2YXRlIGlzTW91c2VNb3ZpbmdUaW1lcjogTm9kZUpTLlRpbWVyO1xyXG4gIHByaXZhdGUgaXNNb3VzZU1vdmluZ1RpbWVvdXQgPSAyMDAwO1xyXG5cclxuICBwcml2YXRlIGV2ZW50czogRXZlbnRIYW5kbGVyW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBldnQ6IEV2ZW50U2VydmljZSkge31cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5ldmVudHMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICBlbGVtZW50OiB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgbmFtZTogXCJsb2Fkc3RhcnRcIixcclxuICAgICAgICBjYWxsYmFjazogZXZlbnQgPT4gKHRoaXMudmlkZW9Mb2FkZWQgPSBmYWxzZSksXHJcbiAgICAgICAgZGlzcG9zZTogbnVsbFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgZWxlbWVudDogdGhpcy52aWRlby5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgIG5hbWU6IFwibG9hZGVkbWV0YWRhdGFcIixcclxuICAgICAgICBjYWxsYmFjazogZXZlbnQgPT4gdGhpcy5ldkxvYWRlZE1ldGFkYXRhKGV2ZW50KSxcclxuICAgICAgICBkaXNwb3NlOiBudWxsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBlbGVtZW50OiB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgbmFtZTogXCJlcnJvclwiLFxyXG4gICAgICAgIGNhbGxiYWNrOiBldmVudCA9PiBjb25zb2xlLmVycm9yKFwiVW5oYW5kbGVkIFZpZGVvIEVycm9yXCIsIGV2ZW50KSxcclxuICAgICAgICBkaXNwb3NlOiBudWxsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBlbGVtZW50OiB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgbmFtZTogXCJjb250ZXh0bWVudVwiLFxyXG4gICAgICAgIGNhbGxiYWNrOiBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpLFxyXG4gICAgICAgIGRpc3Bvc2U6IG51bGxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGVsZW1lbnQ6IHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudCxcclxuICAgICAgICBuYW1lOiBcInRpbWV1cGRhdGVcIixcclxuICAgICAgICBjYWxsYmFjazogZXZlbnQgPT4gdGhpcy5ldlRpbWVVcGRhdGUoZXZlbnQpLFxyXG4gICAgICAgIGRpc3Bvc2U6IG51bGxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGVsZW1lbnQ6IHRoaXMucGxheWVyLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgbmFtZTogXCJtb3VzZW1vdmVcIixcclxuICAgICAgICBjYWxsYmFjazogZXZlbnQgPT4gdGhpcy5ldk1vdXNlTW92ZShldmVudCksXHJcbiAgICAgICAgZGlzcG9zZTogbnVsbFxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudC5vbmxvYWRlZGRhdGEgPSAoKSA9PiAodGhpcy52aWRlb0xvYWRlZCA9IHRydWUpO1xyXG5cclxuICAgIHRoaXMuZXZ0LmFkZEV2ZW50cyh0aGlzLnJlbmRlcmVyLCB0aGlzLmV2ZW50cyk7XHJcblxyXG4gICAgdGhpcy5zZXRWaWRlb1NyYyh0aGlzLnNyYyk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hhbmdlcy5zcmMpIHtcclxuICAgICAgdGhpcy5zZXRWaWRlb1NyYyh0aGlzLnNyYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudC5vbmxvYWRlZGRhdGEgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuZXZ0LnJlbW92ZUV2ZW50cyh0aGlzLmV2ZW50cyk7XHJcbiAgfVxyXG5cclxuICBsb2FkKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMudmlkZW8gJiYgdGhpcy52aWRlby5uYXRpdmVFbGVtZW50KSB7XHJcbiAgICAgIHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudC5sb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRWaWRlb1RhZygpOiBIVE1MVmlkZW9FbGVtZW50IHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy52aWRlbyAmJiB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQgPyAodGhpcy52aWRlby5uYXRpdmVFbGVtZW50IGFzIEhUTUxWaWRlb0VsZW1lbnQpIDogbnVsbDtcclxuICB9XHJcblxyXG4gIGV2TG9hZGVkTWV0YWRhdGEoZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy52aWRlb1dpZHRoID0gdGhpcy52aWRlby5uYXRpdmVFbGVtZW50LnZpZGVvV2lkdGg7XHJcbiAgICB0aGlzLnZpZGVvSGVpZ2h0ID0gdGhpcy52aWRlby5uYXRpdmVFbGVtZW50LnZpZGVvSGVpZ2h0O1xyXG4gICAgdGhpcy52aWRlb0xvYWRlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBldk1vdXNlTW92ZShldmVudDogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLmlzTW91c2VNb3ZpbmcgPSB0cnVlO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaXNNb3VzZU1vdmluZ1RpbWVyKTtcclxuICAgIHRoaXMuaXNNb3VzZU1vdmluZ1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuaXNNb3VzZU1vdmluZyA9IGZhbHNlO1xyXG4gICAgfSwgdGhpcy5pc01vdXNlTW92aW5nVGltZW91dCk7XHJcbiAgfVxyXG5cclxuICBldlRpbWVVcGRhdGUoZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy50aW1lID0gdGhpcy5nZXRWaWRlb1RhZygpLmN1cnJlbnRUaW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3ZlcmxheUNsYXNzKGFjdGl2ZUNsYXNzOiBzdHJpbmcsIGluYWN0aXZlQ2xhc3M6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5vdmVybGF5ID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiAhdGhpcy5wbGF5aW5nIHx8IHRoaXMuaXNNb3VzZU1vdmluZyA/IGFjdGl2ZUNsYXNzIDogaW5hY3RpdmVDbGFzcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm92ZXJsYXkgPyBhY3RpdmVDbGFzcyA6IGluYWN0aXZlQ2xhc3M7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFZpZGVvU3JjKHNyYzogc3RyaW5nIHwgTWVkaWFTdHJlYW0gfCBNZWRpYVNvdXJjZSB8IEJsb2IpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnNyY09iamVjdFVSTCkge1xyXG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMuc3JjT2JqZWN0VVJMKTtcclxuICAgICAgdGhpcy5zcmNPYmplY3RVUkwgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy52aWRlbyB8fCAhdGhpcy52aWRlby5uYXRpdmVFbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXNyYykge1xyXG4gICAgICB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQuc3JjID0gbnVsbDtcclxuICAgICAgaWYgKFwic3JjT2JqZWN0XCIgaW4gSFRNTFZpZGVvRWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQuc3JjT2JqZWN0ID0gbmV3IE1lZGlhU3RyZWFtKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNyYyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQuc3JjID0gc3JjO1xyXG4gICAgfSBlbHNlIGlmIChcInNyY09iamVjdFwiIGluIEhUTUxWaWRlb0VsZW1lbnQucHJvdG90eXBlKSB7XHJcbiAgICAgIHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudC5zcmNPYmplY3QgPSBzcmM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNyY09iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoc3JjKTtcclxuICAgICAgdGhpcy52aWRlby5uYXRpdmVFbGVtZW50LnNyYyA9IHRoaXMuc3JjT2JqZWN0VVJMO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudC5tdXRlZCA9IHRoaXMubXV0ZWQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==