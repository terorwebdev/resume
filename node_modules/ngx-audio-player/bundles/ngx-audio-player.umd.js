(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/material/table'), require('@angular/material/paginator'), require('@angular/material/slider'), require('@angular/material/form-field'), require('@angular/material/expansion'), require('@angular/material/card'), require('@angular/material/button'), require('@angular/common'), require('@angular/forms'), require('@angular/material/icon')) :
    typeof define === 'function' && define.amd ? define('ngx-audio-player', ['exports', '@angular/core', 'rxjs', '@angular/material/table', '@angular/material/paginator', '@angular/material/slider', '@angular/material/form-field', '@angular/material/expansion', '@angular/material/card', '@angular/material/button', '@angular/common', '@angular/forms', '@angular/material/icon'], factory) :
    (global = global || self, factory(global['ngx-audio-player'] = {}, global.ng.core, global.rxjs, global.ng.material.table, global.ng.material.paginator, global.ng.material.slider, global.ng.material['form-field'], global.ng.material.expansion, global.ng.material.card, global.ng.material.button, global.ng.common, global.ng.forms, global.ng.material.icon));
}(this, (function (exports, core, rxjs, table, paginator, slider, formField, expansion, card, button, common, forms, icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var AudioPlayerService = /** @class */ (function () {
        function AudioPlayerService() {
            this.playlist = [];
            this.indexSong = 0;
            this.currentTrack = new rxjs.BehaviorSubject(this.playlist[this.indexSong]);
            this.currentTime = 0;
            this.duration = 0;
        }
        AudioPlayerService.prototype.init = function () {
            this.updateCurrentSong();
        };
        AudioPlayerService.prototype.nextSong = function () {
            if ((this.indexSong + 1) >= this.playlist.length) {
                this.indexSong = 0;
            }
            else {
                this.indexSong++;
            }
            this.updateCurrentSong();
        };
        AudioPlayerService.prototype.previousSong = function () {
            if ((this.indexSong - 1) < 0) {
                this.indexSong = (this.playlist.length - 1);
            }
            else {
                this.indexSong--;
            }
            this.updateCurrentSong();
        };
        AudioPlayerService.prototype.resetPlaylist = function () {
            this.indexSong = 0;
            this.updateCurrentSong();
        };
        AudioPlayerService.prototype.selectATrack = function (index) {
            this.indexSong = index - 1;
            this.updateCurrentSong();
        };
        AudioPlayerService.prototype.updateCurrentSong = function () {
            var current = this.playlist[this.indexSong];
            var previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];
            var next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];
            this.currentTrack.next([
                previous,
                current,
                next
            ]);
        };
        AudioPlayerService.prototype.getSubjectCurrentTrack = function () {
            return this.currentTrack;
        };
        AudioPlayerService.prototype.getPlaylist = function () {
            return this.playlist;
        };
        AudioPlayerService.prototype.setPlaylist = function (playlist) {
            this.playlist = playlist;
        };
        AudioPlayerService.prototype.getIndexSong = function () {
            return this.indexSong;
        };
        AudioPlayerService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], AudioPlayerService);
        return AudioPlayerService;
    }());

    var BaseAudioPlayerFunctions = /** @class */ (function () {
        function BaseAudioPlayerFunctions() {
            this.loaderDisplay = false;
            this.isPlaying = false;
            this.currentTime = 0;
            this.volume = 0.1;
            this.duration = 0.01;
        }
        BaseAudioPlayerFunctions.prototype.currTimePosChanged = function (event) {
            this.player.nativeElement.currentTime = event.value;
        };
        BaseAudioPlayerFunctions.prototype.bindPlayerEvent = function () {
            var _this = this;
            this.player.nativeElement.addEventListener('playing', function () {
                _this.isPlaying = true;
                _this.duration = Math.floor(_this.player.nativeElement.duration);
            });
            this.player.nativeElement.addEventListener('pause', function () {
                _this.isPlaying = false;
            });
            this.player.nativeElement.addEventListener('timeupdate', function () {
                _this.currentTime = Math.floor(_this.player.nativeElement.currentTime);
            });
            this.player.nativeElement.addEventListener('volume', function () {
                _this.volume = Math.floor(_this.player.nativeElement.volume);
            });
            this.player.nativeElement.addEventListener('loadstart', function () {
                _this.loaderDisplay = true;
            });
            this.player.nativeElement.addEventListener('loadeddata', function () {
                _this.loaderDisplay = false;
                _this.duration = Math.floor(_this.player.nativeElement.duration);
            });
        };
        BaseAudioPlayerFunctions.prototype.playBtnHandler = function () {
            if (this.loaderDisplay) {
                return;
            }
            if (this.player.nativeElement.paused) {
                this.player.nativeElement.play(this.currentTime);
            }
            else {
                this.currentTime = this.player.nativeElement.currentTime;
                this.player.nativeElement.pause();
            }
        };
        BaseAudioPlayerFunctions.prototype.play = function () {
            var _this = this;
            setTimeout(function () {
                _this.player.nativeElement.play();
            }, 0);
        };
        BaseAudioPlayerFunctions.prototype.toggleVolume = function () {
            if (this.volume === 0) {
                this.setVolume(1.0);
            }
            else {
                this.setVolume(0);
            }
        };
        BaseAudioPlayerFunctions.prototype.setVolume = function (vol) {
            this.volume = vol;
            this.player.nativeElement.volume = this.volume;
        };
        __decorate([
            core.ViewChild('audioPlayer', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], BaseAudioPlayerFunctions.prototype, "player", void 0);
        return BaseAudioPlayerFunctions;
    }());

    var MatAdvancedAudioPlayerComponent = /** @class */ (function (_super) {
        __extends(MatAdvancedAudioPlayerComponent, _super);
        function MatAdvancedAudioPlayerComponent(playlistService) {
            var _this = _super.call(this) || this;
            _this.playlistService = playlistService;
            _this.displayedColumns = ['title', 'status'];
            _this.dataSource = new table.MatTableDataSource();
            _this.displayTitle = true;
            _this.displayPlaylist = true;
            _this.pageSizeOptions = [10, 20, 30];
            _this.expanded = true;
            _this.autoPlay = false;
            _this.displayVolumeControls = true;
            return _this;
        }
        MatAdvancedAudioPlayerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.setDataSourceAttributes();
            this.bindPlayerEvent();
            this.player.nativeElement.addEventListener('ended', function () {
                if (_this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {
                    _this.nextSong();
                }
            });
            this.playlistService.setPlaylist(this.playlistData);
            this.playlistService.getSubjectCurrentTrack().subscribe(function (playlistTrack) {
                _this.playlistTrack = playlistTrack;
            });
            this.player.nativeElement.currentTime = 0;
            this.playlistService.init();
            if (this.autoPlay) {
                _super.prototype.play.call(this);
            }
        };
        Object.defineProperty(MatAdvancedAudioPlayerComponent.prototype, "matPaginator", {
            set: function (mp) {
                this.paginator = mp;
                this.setDataSourceAttributes();
            },
            enumerable: true,
            configurable: true
        });
        MatAdvancedAudioPlayerComponent.prototype.setDataSourceAttributes = function () {
            var index = 1;
            if (this.playlistData) {
                this.playlistData.forEach(function (data) {
                    data.index = index++;
                });
                this.dataSource = new table.MatTableDataSource(this.playlistData);
                this.dataSource.paginator = this.paginator;
            }
        };
        MatAdvancedAudioPlayerComponent.prototype.nextSong = function () {
            if (this.displayPlaylist == true
                && (((this.playlistService.indexSong + 1) % this.paginator.pageSize) === 0
                    || (this.playlistService.indexSong + 1) === this.paginator.length)) {
                if (this.paginator.hasNextPage()) {
                    this.paginator.nextPage();
                }
                else if (!this.paginator.hasNextPage()) {
                    this.paginator.firstPage();
                }
            }
            this.currentTime = 0;
            this.duration = 0.01;
            this.playlistService.nextSong();
            this.play();
        };
        MatAdvancedAudioPlayerComponent.prototype.previousSong = function () {
            this.currentTime = 0;
            this.duration = 0.01;
            if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {
                if (this.displayPlaylist == true
                    && (((this.playlistService.indexSong) % this.paginator.pageSize) === 0
                        || (this.playlistService.indexSong) === 0)) {
                    if (this.paginator.hasPreviousPage()) {
                        this.paginator.previousPage();
                    }
                    else if (!this.paginator.hasPreviousPage()) {
                        this.paginator.lastPage();
                    }
                }
                this.playlistService.previousSong();
            }
            else {
                this.resetSong();
            }
            this.play();
        };
        MatAdvancedAudioPlayerComponent.prototype.resetSong = function () {
            this.player.nativeElement.src = this.playlistTrack[1].link;
        };
        MatAdvancedAudioPlayerComponent.prototype.selectTrack = function (index) {
            var _this = this;
            console.log('selectTrack(index: number): void: ' + index);
            this.playlistService.selectATrack(index);
            setTimeout(function () {
                _this.player.nativeElement.play();
            }, 0);
        };
        MatAdvancedAudioPlayerComponent.prototype.checkIfSongHasStartedSinceAtleastTwoSeconds = function () {
            return this.player.nativeElement.currentTime > 2;
        };
        Object.defineProperty(MatAdvancedAudioPlayerComponent.prototype, "playlist", {
            set: function (playlist) {
                this.playlistData = playlist;
                this.ngOnInit();
            },
            enumerable: true,
            configurable: true
        });
        MatAdvancedAudioPlayerComponent.ctorParameters = function () { return [
            { type: AudioPlayerService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatAdvancedAudioPlayerComponent.prototype, "displayTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatAdvancedAudioPlayerComponent.prototype, "displayPlaylist", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatAdvancedAudioPlayerComponent.prototype, "pageSizeOptions", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatAdvancedAudioPlayerComponent.prototype, "expanded", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatAdvancedAudioPlayerComponent.prototype, "autoPlay", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatAdvancedAudioPlayerComponent.prototype, "displayVolumeControls", void 0);
        __decorate([
            core.ViewChild(paginator.MatPaginator, { static: false }),
            __metadata("design:type", paginator.MatPaginator),
            __metadata("design:paramtypes", [paginator.MatPaginator])
        ], MatAdvancedAudioPlayerComponent.prototype, "matPaginator", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], MatAdvancedAudioPlayerComponent.prototype, "playlist", null);
        MatAdvancedAudioPlayerComponent = __decorate([
            core.Component({
                selector: 'mat-advanced-audio-player',
                template: "<mat-card class=\"d-flex justify-content-center ngx-advanced-audio-player z-depth-1 mat-elevation-z2\" style=\"margin: 0px;\">\n  \n  <audio [src]=\"playlistTrack[1].link\" #audioPlayer></audio>\n\n    <button class=\"p-1\" mat-button (click)='previousSong();'\n      [disabled]=\"loaderDisplay\">\n      <mat-icon aria-hidden=\"true\">\n        <!-- Skip previous icon (skip_previous) -->\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"/><path d=\"M0 0h32v32H0z\" fill=\"none\"/></svg>\n      </mat-icon>\n    </button>\n    <button mat-button class=\"p-1 play-pause\" (click)='playBtnHandler();' [disabled]=\"loaderDisplay\">\n        <mat-icon *ngIf=\"!loaderDisplay && !isPlaying\" class=\"play-track\" aria-hidden=\"true\">\n          <!-- Play icon (play_arrow) -->\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n        </mat-icon>\n        <mat-icon *ngIf=\"!loaderDisplay && isPlaying\" class=\"pause-track\" aria-hidden=\"true\">\n          <!-- Pause icon (pause) -->\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n        </mat-icon>\n    </button>\n    <button mat-button class=\"p-1 skip-next\" (click)='nextSong();' [disabled]=\"loaderDisplay\">\n      <mat-icon class=\"next-track\" aria-hidden=\"true\">\n        <!-- Skip next icon (skip_next) -->\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n      </mat-icon>\n    </button>\n\n  <div class=\"col\">\n    <div class=\"d-flex flex-fill justify-content-center\">\n      <div class=\"d-none d-sm-block py-3 px-1\" style=\"font-size: 12px\">\n        <span *ngIf=\"duration !== 0.01\">\n          {{currentTime | secondsToMinutes}}\n        </span>\n      </div>\n      <mat-slider class=\"d-none d-sm-block flex-fill p-1\" style=\"width: 100%\" min=\"0\" max=\"{{duration}}\" value=\"{{currentTime}}\"\n        (change)=\"currTimePosChanged($event)\"></mat-slider>\n\n      <div class=\"py-3 px-1\" style=\"font-size: 12px; text-align: right\">\n        <span *ngIf=\"duration !== 0.01\">\n          -{{duration-currentTime | secondsToMinutes }}\n        </span>\n      </div>\n    </div>\n  </div>\n  <button *ngIf=\"displayVolumeControls\" mat-button class=\"p-1 volume\" (click)='toggleVolume();'>\n    <mat-icon *ngIf=\"volume === 0\" class=\"volume-mute\" aria-hidden=\"true\">\n      <!-- Volume mute icon (volume_off) -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n    </mat-icon>\n    <mat-icon *ngIf=\"volume > 0\" class=\"volume-up\" aria-hidden=\"true\">\n      <!-- Volume up icon (volume_up) -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n    </mat-icon>\n  </button>\n</mat-card>\n\n<mat-card *ngIf=\"displayTitle\" class=\"mat-elevation-z1\">\n  <div style=\"text-align: center;\">\n    <div style=\"margin: 1px 2px; padding: 1em\">\n      <span *ngIf=\"!isPlaying\">{{ playlistTrack[1].title }}</span>\n      <marquee *ngIf=\"isPlaying\" behavior=\"scroll\" direction=\"left\">{{ playlistTrack[1].title }}</marquee>\n    </div>\n    <div class=\"clear\"></div>\n  </div>\n</mat-card>\n\n<mat-accordion *ngIf=\"displayPlaylist\">\n  <mat-expansion-panel [expanded]=\"expanded\">\n    <mat-expansion-panel-header>\n      Play List\n    </mat-expansion-panel-header>\n    <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z6\">\n      <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef> Title </th>\n        <td mat-cell *matCellDef=\"let element\" (click)=\"selectTrack(element.index)\"> {{element.title}} </td>\n      </ng-container>\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> </th>\n        <td mat-cell *matCellDef=\"let element\">\n          <div *ngIf=\"playlistTrack[1].title === element.title\">\n            <!-- <mat-icon *ngIf=\"isPlaying\" aria-hidden=\"true\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n            </mat-icon> -->\n            <mat-icon class=\"currently-playing\" *ngIf=\"isPlaying\" aria-hidden=\"true\">\n              <!-- Play icon (play_arrow) -->\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 3v9.28c-.47-.17-.97-.28-1.5-.28C8.01 12 6 14.01 6 16.5S8.01 21 10.5 21c2.31 0 4.2-1.75 4.45-4H15V6h4V3h-7z\"/></svg>\n            </mat-icon>\n          </div>\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr class=\"mat-select-content\" mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" showFirstLastButtons></mat-paginator>\n  </mat-expansion-panel>\n</mat-accordion>",
                styles: ["@import url(https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/css/bootstrap-grid.min.css);mat-card{padding:0!important;background:rgba(0,0,0,.02)}mat-slider{max-height:30px}table{width:100%}button:focus,button:hover{outline:0!important}.ngx-advanced-audio-player{min-width:325px}.mat-icon{height:32px!important;width:32px!important}.material-icons{font-size:16px!important}mat-icon>.currently-playing{height:16px!important;width:16px!important}.play-pause{border-left:2px solid rgba(0,0,0,.1);border-right:2px solid rgba(0,0,0,.1)}.volume{border-left:2px solid rgba(0,0,0,.1)}.skip-next{border-right:2px solid rgba(0,0,0,.1)}"]
            }),
            __metadata("design:paramtypes", [AudioPlayerService])
        ], MatAdvancedAudioPlayerComponent);
        return MatAdvancedAudioPlayerComponent;
    }(BaseAudioPlayerFunctions));

    var MatBasicAudioPlayerComponent = /** @class */ (function (_super) {
        __extends(MatBasicAudioPlayerComponent, _super);
        function MatBasicAudioPlayerComponent() {
            var _this = _super.call(this) || this;
            _this.displayTitle = false;
            _this.autoPlay = false;
            _this.displayVolumeControls = true;
            return _this;
        }
        MatBasicAudioPlayerComponent.prototype.ngOnInit = function () {
            this.bindPlayerEvent();
            if (this.autoPlay) {
                _super.prototype.play.call(this);
            }
        };
        MatBasicAudioPlayerComponent.prototype.resetSong = function () {
            this.player.nativeElement.src = this.audioUrl;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], MatBasicAudioPlayerComponent.prototype, "title", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], MatBasicAudioPlayerComponent.prototype, "audioUrl", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatBasicAudioPlayerComponent.prototype, "displayTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatBasicAudioPlayerComponent.prototype, "autoPlay", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], MatBasicAudioPlayerComponent.prototype, "displayVolumeControls", void 0);
        MatBasicAudioPlayerComponent = __decorate([
            core.Component({
                selector: 'mat-basic-audio-player',
                template: "<mat-card class=\"d-flex ngx-basic-audio-player z-depth-1 mat-elevation-z1\">\n    <audio [src]=\"audioUrl\" #audioPlayer></audio>\n    <button mat-button (click)='playBtnHandler();' class=\"ngx-basic-audio-player-button-handler\"\n        style=\"font-size: 14px!important;\" [disabled]=\"loaderDisplay\">\n            <mat-icon *ngIf=\"!loaderDisplay && !isPlaying\" class=\"play-track\" aria-hidden=\"true\">\n                <!-- Play icon (play_arrow) -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n            </mat-icon>\n            <mat-icon *ngIf=\"!loaderDisplay && isPlaying\" class=\"pause-track\" aria-hidden=\"true\">\n                <!-- Pause icon (pause) -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n            </mat-icon>\n    </button>\n    <div class=\"flex-fill pl-1 ngx-basic-audio-player-slider\">\n        <mat-slider style=\"width: 100%\" min=\"0\" max=\"{{duration}}\" value=\"{{currentTime}}\"\n            (change)=\"currTimePosChanged($event)\"></mat-slider>\n    </div>\n    <div class=\"d-flex ngx-basic-audio-player-duration\">\n        <span *ngIf=\"duration !== 0.01\" class=\"pl-2 pr-3 my-auto\" style=\"font-size: 14px!important;\">\n            -{{duration-currentTime |\n            secondsToMinutes }}\n        </span>\n    </div>\n    <button *ngIf=\"displayVolumeControls\" mat-button (click)='toggleVolume();'\n        style=\"padding: 0px!important; min-width:48px!important;\">\n        <mat-icon *ngIf=\"volume === 0\" class=\"volume-mute\" aria-hidden=\"true\">\n            <!-- Volume mute icon (volume_off) -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n          </mat-icon>\n          <mat-icon *ngIf=\"volume > 0\" class=\"volume-up\" aria-hidden=\"true\">\n            <!-- Volume up icon (volume_up) -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n          </mat-icon>\n    </button>\n</mat-card>\n\n<mat-card class=\"z-depth-1 mat-elevation-z1\" *ngIf=\"displayTitle && title !== ''\">\n    <div style=\"text-align: center;\">\n        <div style=\"margin: 1px 2px; padding: 1em\">\n            {{ title }}\n        </div>\n    </div>\n</mat-card>",
                styles: ["@import url(https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/css/bootstrap-grid.min.css);mat-card,mat-slider{padding:0!important}button:focus,button:hover{outline:0!important}.ngx-basic-audio-player{min-width:300px}svg{vertical-align:top}.mat-icon{height:32px!important;width:32px!important}.material-icons{font-size:32px!important}mat-card{background:rgba(0,0,0,.02)}"]
            }),
            __metadata("design:paramtypes", [])
        ], MatBasicAudioPlayerComponent);
        return MatBasicAudioPlayerComponent;
    }(BaseAudioPlayerFunctions));

    /*
     * Transform seconds to minutes:seconds
     * Example : 270 -> 02:30
    */
    var SecondsToMinutesPipe = /** @class */ (function () {
        function SecondsToMinutesPipe() {
        }
        SecondsToMinutesPipe.prototype.transform = function (time) {
            var minutes = ('0' + Math.floor(time / 60)).slice(-2);
            var seconds = ('0' + time % 60).slice(-2);
            return minutes + ":" + seconds;
        };
        SecondsToMinutesPipe = __decorate([
            core.Pipe({ name: 'secondsToMinutes' })
        ], SecondsToMinutesPipe);
        return SecondsToMinutesPipe;
    }());

    var NgxAudioPlayerModule = /** @class */ (function () {
        function NgxAudioPlayerModule() {
        }
        NgxAudioPlayerModule = __decorate([
            core.NgModule({
                declarations: [MatBasicAudioPlayerComponent, SecondsToMinutesPipe, MatAdvancedAudioPlayerComponent],
                imports: [common.CommonModule, forms.FormsModule, button.MatButtonModule, card.MatCardModule, table.MatTableModule, formField.MatFormFieldModule,
                    slider.MatSliderModule, expansion.MatExpansionModule, paginator.MatPaginatorModule, icon.MatIconModule],
                exports: [MatBasicAudioPlayerComponent, MatAdvancedAudioPlayerComponent],
                providers: [AudioPlayerService]
            }),
            __metadata("design:paramtypes", [])
        ], NgxAudioPlayerModule);
        return NgxAudioPlayerModule;
    }());

    var Track = /** @class */ (function () {
        function Track() {
        }
        return Track;
    }());

    exports.MatAdvancedAudioPlayerComponent = MatAdvancedAudioPlayerComponent;
    exports.MatBasicAudioPlayerComponent = MatBasicAudioPlayerComponent;
    exports.NgxAudioPlayerModule = NgxAudioPlayerModule;
    exports.Track = Track;
    exports.ɵa = BaseAudioPlayerFunctions;
    exports.ɵb = AudioPlayerService;
    exports.ɵc = SecondsToMinutesPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-audio-player.umd.js.map
