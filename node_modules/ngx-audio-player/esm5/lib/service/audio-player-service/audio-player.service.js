import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var AudioPlayerService = /** @class */ (function () {
    function AudioPlayerService() {
        this.playlist = [];
        this.indexSong = 0;
        this.currentTrack = new BehaviorSubject(this.playlist[this.indexSong]);
        this.currentTime = 0;
        this.duration = 0;
    }
    AudioPlayerService.prototype.init = function () {
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.nextSong = function () {
        if ((this.indexSong + 1) >= this.playlist.length) {
            this.indexSong = 0;
        }
        else {
            this.indexSong++;
        }
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.previousSong = function () {
        if ((this.indexSong - 1) < 0) {
            this.indexSong = (this.playlist.length - 1);
        }
        else {
            this.indexSong--;
        }
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.resetPlaylist = function () {
        this.indexSong = 0;
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.selectATrack = function (index) {
        this.indexSong = index - 1;
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.updateCurrentSong = function () {
        var current = this.playlist[this.indexSong];
        var previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];
        var next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];
        this.currentTrack.next([
            previous,
            current,
            next
        ]);
    };
    AudioPlayerService.prototype.getSubjectCurrentTrack = function () {
        return this.currentTrack;
    };
    AudioPlayerService.prototype.getPlaylist = function () {
        return this.playlist;
    };
    AudioPlayerService.prototype.setPlaylist = function (playlist) {
        this.playlist = playlist;
    };
    AudioPlayerService.prototype.getIndexSong = function () {
        return this.indexSong;
    };
    AudioPlayerService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], AudioPlayerService);
    return AudioPlayerService;
}());
export { AudioPlayerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaW8tcGxheWVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXVkaW8tcGxheWVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvYXVkaW8tcGxheWVyLXNlcnZpY2UvYXVkaW8tcGxheWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUl2QztJQVNFO1FBUEEsYUFBUSxHQUFZLEVBQUUsQ0FBQztRQUV2QixjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsaUJBQVksR0FBd0IsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN2RixnQkFBVyxHQUFHLENBQUMsQ0FBQztRQUNoQixhQUFRLEdBQUcsQ0FBQyxDQUFDO0lBSWIsQ0FBQztJQUVELGlDQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQscUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQseUNBQVksR0FBWjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCwwQ0FBYSxHQUFiO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELHlDQUFZLEdBQVosVUFBYSxLQUFhO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsOENBQWlCLEdBQWpCO1FBQ0UsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsSUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzSCxJQUFNLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbkgsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDckIsUUFBUTtZQUNSLE9BQU87WUFDUCxJQUFJO1NBQ0wsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1EQUFzQixHQUF0QjtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsd0NBQVcsR0FBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsd0NBQVcsR0FBWCxVQUFZLFFBQWlCO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCx5Q0FBWSxHQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUF2RVUsa0JBQWtCO1FBRDlCLFVBQVUsRUFBRTs7T0FDQSxrQkFBa0IsQ0F3RTlCO0lBQUQseUJBQUM7Q0FBQSxBQXhFRCxJQXdFQztTQXhFWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyYWNrIH0gZnJvbSAnLi4vLi4vbW9kZWwvdHJhY2subW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXVkaW9QbGF5ZXJTZXJ2aWNlIHtcblxuICBwbGF5bGlzdDogVHJhY2tbXSA9IFtdO1xuXG4gIGluZGV4U29uZyA9IDA7XG4gIGN1cnJlbnRUcmFjazogQmVoYXZpb3JTdWJqZWN0PHt9PiA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5wbGF5bGlzdFt0aGlzLmluZGV4U29uZ10pO1xuICBjdXJyZW50VGltZSA9IDA7XG4gIGR1cmF0aW9uID0gMDtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZUN1cnJlbnRTb25nKCk7XG4gIH1cblxuICBuZXh0U29uZygpOiB2b2lkIHtcbiAgICBpZiAoKHRoaXMuaW5kZXhTb25nICsgMSkgPj0gdGhpcy5wbGF5bGlzdC5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW5kZXhTb25nID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbmRleFNvbmcrKztcbiAgICB9XG4gICAgdGhpcy51cGRhdGVDdXJyZW50U29uZygpO1xuICB9XG5cbiAgcHJldmlvdXNTb25nKCk6IHZvaWQge1xuICAgIGlmICgodGhpcy5pbmRleFNvbmcgLSAxKSA8IDApIHtcbiAgICAgIHRoaXMuaW5kZXhTb25nID0gKHRoaXMucGxheWxpc3QubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5kZXhTb25nLS07XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQ3VycmVudFNvbmcoKTtcbiAgfVxuXG4gIHJlc2V0UGxheWxpc3QoKTogdm9pZCB7XG4gICAgdGhpcy5pbmRleFNvbmcgPSAwO1xuICAgIHRoaXMudXBkYXRlQ3VycmVudFNvbmcoKTtcbiAgfVxuXG4gIHNlbGVjdEFUcmFjayhpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5pbmRleFNvbmcgPSBpbmRleCAtIDE7XG4gICAgdGhpcy51cGRhdGVDdXJyZW50U29uZygpO1xuICB9XG5cbiAgdXBkYXRlQ3VycmVudFNvbmcoKTogdm9pZCB7XG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMucGxheWxpc3RbdGhpcy5pbmRleFNvbmddO1xuICAgIGNvbnN0IHByZXZpb3VzID0gKCh0aGlzLmluZGV4U29uZyAtIDEpID49IDApID8gdGhpcy5wbGF5bGlzdFt0aGlzLmluZGV4U29uZyAtIDFdIDogdGhpcy5wbGF5bGlzdFt0aGlzLnBsYXlsaXN0Lmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IG5leHQgPSAoKHRoaXMuaW5kZXhTb25nICsgMSkgPj0gdGhpcy5wbGF5bGlzdC5sZW5ndGgpID8gdGhpcy5wbGF5bGlzdFswXSA6IHRoaXMucGxheWxpc3RbdGhpcy5pbmRleFNvbmcgKyAxXTtcblxuICAgIHRoaXMuY3VycmVudFRyYWNrLm5leHQoW1xuICAgICAgcHJldmlvdXMsXG4gICAgICBjdXJyZW50LFxuICAgICAgbmV4dFxuICAgIF0pO1xuICB9XG5cbiAgZ2V0U3ViamVjdEN1cnJlbnRUcmFjaygpOiBCZWhhdmlvclN1YmplY3Q8e30+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VHJhY2s7XG4gIH1cblxuICBnZXRQbGF5bGlzdCgpOiBUcmFja1tdIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5bGlzdDtcbiAgfVxuXG4gIHNldFBsYXlsaXN0KHBsYXlsaXN0OiBUcmFja1tdKSB7XG4gICAgdGhpcy5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICB9XG5cbiAgZ2V0SW5kZXhTb25nKCkge1xuICAgIHJldHVybiB0aGlzLmluZGV4U29uZztcbiAgfVxufVxuIl19