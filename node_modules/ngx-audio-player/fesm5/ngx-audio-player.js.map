{"version":3,"file":"ngx-audio-player.js","sources":["ng://ngx-audio-player/lib/service/audio-player-service/audio-player.service.ts","ng://ngx-audio-player/lib/component/base/base-audio-player-components.ts","ng://ngx-audio-player/lib/component/mat-advanced-audio-player/mat-advanced-audio-player.component.ts","ng://ngx-audio-player/lib/component/mat-basic-audio-player/mat-basic-audio-player.component.ts","ng://ngx-audio-player/lib/pipe/seconds-to-minutes.ts","ng://ngx-audio-player/lib/ngx-audio-player.module.ts","ng://ngx-audio-player/lib/model/track.model.ts","ng://ngx-audio-player/public_api.ts","ng://ngx-audio-player/ngx-audio-player.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Track } from '../../model/track.model';\n\n@Injectable()\nexport class AudioPlayerService {\n\n  playlist: Track[] = [];\n\n  indexSong = 0;\n  currentTrack: BehaviorSubject<{}> = new BehaviorSubject(this.playlist[this.indexSong]);\n  currentTime = 0;\n  duration = 0;\n\n  constructor() {\n\n  }\n\n  init(): void {\n    this.updateCurrentSong();\n  }\n\n  nextSong(): void {\n    if ((this.indexSong + 1) >= this.playlist.length) {\n      this.indexSong = 0;\n    } else {\n      this.indexSong++;\n    }\n    this.updateCurrentSong();\n  }\n\n  previousSong(): void {\n    if ((this.indexSong - 1) < 0) {\n      this.indexSong = (this.playlist.length - 1);\n    } else {\n      this.indexSong--;\n    }\n    this.updateCurrentSong();\n  }\n\n  resetPlaylist(): void {\n    this.indexSong = 0;\n    this.updateCurrentSong();\n  }\n\n  selectATrack(index: number): void {\n    this.indexSong = index - 1;\n    this.updateCurrentSong();\n  }\n\n  updateCurrentSong(): void {\n    const current = this.playlist[this.indexSong];\n    const previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];\n    const next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];\n\n    this.currentTrack.next([\n      previous,\n      current,\n      next\n    ]);\n  }\n\n  getSubjectCurrentTrack(): BehaviorSubject<{}> {\n    return this.currentTrack;\n  }\n\n  getPlaylist(): Track[] {\n    return this.playlist;\n  }\n\n  setPlaylist(playlist: Track[]) {\n    this.playlist = playlist;\n  }\n\n  getIndexSong() {\n    return this.indexSong;\n  }\n}\n","import { ViewChild, ElementRef } from '@angular/core';\nimport { MatSlider } from '@angular/material/slider';\n\nexport class BaseAudioPlayerFunctions {\n\n    @ViewChild('audioPlayer', {static: true}) player: ElementRef;\n    timeLineDuration: MatSlider;\n\n    loaderDisplay = false;\n    isPlaying = false;\n    currentTime = 0;\n    volume = 0.1;\n    duration = 0.01;\n\n    currTimePosChanged(event) {\n        this.player.nativeElement.currentTime = event.value;\n    }\n\n    bindPlayerEvent(): void {\n        this.player.nativeElement.addEventListener('playing', () => {\n            this.isPlaying = true;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('pause', () => {\n            this.isPlaying = false;\n        });\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.currentTime = Math.floor(this.player.nativeElement.currentTime);\n        });\n        this.player.nativeElement.addEventListener('volume', () => {\n            this.volume = Math.floor(this.player.nativeElement.volume);\n        });\n        this.player.nativeElement.addEventListener('loadstart', () => {\n            this.loaderDisplay = true;\n        });\n        this.player.nativeElement.addEventListener('loadeddata', () => {\n            this.loaderDisplay = false;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n    }\n\n    playBtnHandler(): void {\n        if (this.loaderDisplay) {\n            return;\n        }\n        if (this.player.nativeElement.paused) {\n            this.player.nativeElement.play(this.currentTime);\n        } else {\n            this.currentTime = this.player.nativeElement.currentTime;\n            this.player.nativeElement.pause();\n        }\n    }\n\n    play(): void {\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 0);\n    }\n\n    toggleVolume() {\n        if (this.volume === 0) {\n            this.setVolume(1.0);\n        } else {\n            this.setVolume(0);\n        }\n    }\n\n    private setVolume(vol) {\n        this.volume = vol;\n        this.player.nativeElement.volume = this.volume;\n    }\n\n}\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';\nimport { Track } from '../../model/track.model';\nimport { BaseAudioPlayerFunctions } from '../base/base-audio-player-components';\nimport { MatSlider } from '@angular/material/slider';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\n\n@Component({\n    selector: 'mat-advanced-audio-player',\n    templateUrl: './mat-advanced-audio-player.component.html',\n    styleUrls: ['./mat-advanced-audio-player.component.css']\n})\nexport class MatAdvancedAudioPlayerComponent extends BaseAudioPlayerFunctions implements OnInit {\n\n    displayedColumns: string[] = ['title', 'status'];\n    timeLineDuration: MatSlider;\n\n    dataSource = new MatTableDataSource<Track>();\n\n    paginator: MatPaginator;\n\n    playlistData: Track[];\n\n    @Input()\n    displayTitle = true;\n\n    @Input()\n    displayPlaylist = true;\n\n    @Input()\n    pageSizeOptions = [10, 20, 30];\n\n    @Input()\n    expanded = true;\n\n    @Input()\n    autoPlay = false;\n\n    @Input()\n    displayVolumeControls = true;\n\n    playlistTrack: any;\n\n    constructor(private playlistService: AudioPlayerService) {\n        super();\n    }\n\n    ngOnInit() {\n        this.setDataSourceAttributes();\n        this.bindPlayerEvent();\n        this.player.nativeElement.addEventListener('ended', () => {\n            if (this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n                this.nextSong();\n            }\n        });\n        this.playlistService.setPlaylist(this.playlistData);\n        this.playlistService.getSubjectCurrentTrack().subscribe((playlistTrack) => {\n            this.playlistTrack = playlistTrack;\n        });\n        this.player.nativeElement.currentTime = 0;\n        this.playlistService.init();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n\n    @ViewChild(MatPaginator, { static: false }) set matPaginator(mp: MatPaginator) {\n        this.paginator = mp;\n        this.setDataSourceAttributes();\n    }\n\n    setDataSourceAttributes() {\n        let index = 1;\n        if (this.playlistData) {\n            this.playlistData.forEach(data => {\n                data.index = index++;\n            });\n            this.dataSource = new MatTableDataSource<Track>(this.playlistData);\n            this.dataSource.paginator = this.paginator;\n        }\n    }\n\n    nextSong(): void {\n        if (this.displayPlaylist == true\n            && (((this.playlistService.indexSong + 1) % this.paginator.pageSize) === 0\n                || (this.playlistService.indexSong + 1) === this.paginator.length)) {\n            if (this.paginator.hasNextPage()) {\n                this.paginator.nextPage();\n            } else if (!this.paginator.hasNextPage()) {\n                this.paginator.firstPage();\n            }\n        }\n        this.currentTime = 0;\n        this.duration = 0.01;\n        this.playlistService.nextSong();\n        this.play();\n    }\n\n    previousSong(): void {\n        this.currentTime = 0;\n        this.duration = 0.01;\n        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n            if (this.displayPlaylist == true\n                && (((this.playlistService.indexSong) % this.paginator.pageSize) === 0\n                    || (this.playlistService.indexSong) === 0)) {\n                if (this.paginator.hasPreviousPage()) {\n                    this.paginator.previousPage();\n                } else if (!this.paginator.hasPreviousPage()) {\n                    this.paginator.lastPage();\n                }\n            }\n            this.playlistService.previousSong();\n        } else {\n            this.resetSong();\n        }\n        this.play();\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.playlistTrack[1].link;\n    }\n\n    selectTrack(index: number): void {\n        console.log('selectTrack(index: number): void: ' + index);\n        this.playlistService.selectATrack(index);\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 0);\n    }\n\n    checkIfSongHasStartedSinceAtleastTwoSeconds(): boolean {\n        return this.player.nativeElement.currentTime > 2;\n    }\n\n    @Input()\n    set playlist(playlist: Track[]) {\n        this.playlistData = playlist;\n        this.ngOnInit();\n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { BaseAudioPlayerFunctions } from '../base/base-audio-player-components';\n\n@Component({\n    selector: 'mat-basic-audio-player',\n    templateUrl: './mat-basic-audio-player.component.html',\n    styleUrls: ['./mat-basic-audio-player.component.css']\n})\nexport class MatBasicAudioPlayerComponent extends BaseAudioPlayerFunctions implements OnInit {\n\n    @Input()\n    title: string;\n\n    @Input()\n    audioUrl: string;\n\n    @Input()\n    displayTitle = false;\n\n    @Input()\n    autoPlay = false;\n\n    @Input()\n    displayVolumeControls = true;\n\n    constructor() {\n        super();\n    }\n\n    ngOnInit() {\n        this.bindPlayerEvent();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.audioUrl;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Transform seconds to minutes:seconds\n * Example : 270 -> 02:30\n*/\n@Pipe({name: 'secondsToMinutes'})\nexport class SecondsToMinutesPipe implements PipeTransform {\n    transform(time: number): string {\n        const minutes = ('0' + Math.floor(time / 60)).slice(-2);\n        const seconds = ('0' + time % 60).slice(-2);\n        return `${minutes}:${seconds}`;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { MatBasicAudioPlayerComponent } from './component/mat-basic-audio-player/mat-basic-audio-player.component';\nimport { AudioPlayerService } from './service/audio-player-service/audio-player.service';\nimport { CommonModule } from '@angular/common';\nimport { SecondsToMinutesPipe } from './pipe/seconds-to-minutes';\nimport { MatAdvancedAudioPlayerComponent } from './component/mat-advanced-audio-player/mat-advanced-audio-player.component';\n\nimport { FormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [MatBasicAudioPlayerComponent, SecondsToMinutesPipe, MatAdvancedAudioPlayerComponent],\n  imports: [CommonModule, FormsModule, MatButtonModule, MatCardModule, MatTableModule, MatFormFieldModule,\n    MatSliderModule, MatExpansionModule, MatPaginatorModule, MatIconModule],\n  exports: [MatBasicAudioPlayerComponent, MatAdvancedAudioPlayerComponent],\n  providers: [AudioPlayerService]\n})\nexport class NgxAudioPlayerModule {\n  constructor() {\n  }\n}\n","export class Track {\n  index?: number;\n  link: string;\n  title: string;\n}\n","/*\n * Public API Surface of ngx-audio-player\n */\n\nexport * from './lib/component/mat-advanced-audio-player/mat-advanced-audio-player.component';\nexport * from './lib/component/mat-basic-audio-player/mat-basic-audio-player.component';\nexport * from './lib/ngx-audio-player.module';\nexport * from './lib/model/track.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {BaseAudioPlayerFunctions as ɵa} from './lib/component/base/base-audio-player-components';\nexport {SecondsToMinutesPipe as ɵc} from './lib/pipe/seconds-to-minutes';\nexport {AudioPlayerService as ɵb} from './lib/service/audio-player-service/audio-player.service';"],"names":[],"mappings":"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"}