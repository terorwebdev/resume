import { __decorate, __metadata, __extends } from 'tslib';
import { Injectable, ViewChild, ElementRef, Input, Component, Pipe, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatSliderModule } from '@angular/material/slider';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatIconModule } from '@angular/material/icon';

var AudioPlayerService = /** @class */ (function () {
    function AudioPlayerService() {
        this.playlist = [];
        this.indexSong = 0;
        this.currentTrack = new BehaviorSubject(this.playlist[this.indexSong]);
        this.currentTime = 0;
        this.duration = 0;
    }
    AudioPlayerService.prototype.init = function () {
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.nextSong = function () {
        if ((this.indexSong + 1) >= this.playlist.length) {
            this.indexSong = 0;
        }
        else {
            this.indexSong++;
        }
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.previousSong = function () {
        if ((this.indexSong - 1) < 0) {
            this.indexSong = (this.playlist.length - 1);
        }
        else {
            this.indexSong--;
        }
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.resetPlaylist = function () {
        this.indexSong = 0;
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.selectATrack = function (index) {
        this.indexSong = index - 1;
        this.updateCurrentSong();
    };
    AudioPlayerService.prototype.updateCurrentSong = function () {
        var current = this.playlist[this.indexSong];
        var previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];
        var next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];
        this.currentTrack.next([
            previous,
            current,
            next
        ]);
    };
    AudioPlayerService.prototype.getSubjectCurrentTrack = function () {
        return this.currentTrack;
    };
    AudioPlayerService.prototype.getPlaylist = function () {
        return this.playlist;
    };
    AudioPlayerService.prototype.setPlaylist = function (playlist) {
        this.playlist = playlist;
    };
    AudioPlayerService.prototype.getIndexSong = function () {
        return this.indexSong;
    };
    AudioPlayerService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], AudioPlayerService);
    return AudioPlayerService;
}());

var BaseAudioPlayerFunctions = /** @class */ (function () {
    function BaseAudioPlayerFunctions() {
        this.loaderDisplay = false;
        this.isPlaying = false;
        this.currentTime = 0;
        this.volume = 0.1;
        this.duration = 0.01;
    }
    BaseAudioPlayerFunctions.prototype.currTimePosChanged = function (event) {
        this.player.nativeElement.currentTime = event.value;
    };
    BaseAudioPlayerFunctions.prototype.bindPlayerEvent = function () {
        var _this = this;
        this.player.nativeElement.addEventListener('playing', function () {
            _this.isPlaying = true;
            _this.duration = Math.floor(_this.player.nativeElement.duration);
        });
        this.player.nativeElement.addEventListener('pause', function () {
            _this.isPlaying = false;
        });
        this.player.nativeElement.addEventListener('timeupdate', function () {
            _this.currentTime = Math.floor(_this.player.nativeElement.currentTime);
        });
        this.player.nativeElement.addEventListener('volume', function () {
            _this.volume = Math.floor(_this.player.nativeElement.volume);
        });
        this.player.nativeElement.addEventListener('loadstart', function () {
            _this.loaderDisplay = true;
        });
        this.player.nativeElement.addEventListener('loadeddata', function () {
            _this.loaderDisplay = false;
            _this.duration = Math.floor(_this.player.nativeElement.duration);
        });
    };
    BaseAudioPlayerFunctions.prototype.playBtnHandler = function () {
        if (this.loaderDisplay) {
            return;
        }
        if (this.player.nativeElement.paused) {
            this.player.nativeElement.play(this.currentTime);
        }
        else {
            this.currentTime = this.player.nativeElement.currentTime;
            this.player.nativeElement.pause();
        }
    };
    BaseAudioPlayerFunctions.prototype.play = function () {
        var _this = this;
        setTimeout(function () {
            _this.player.nativeElement.play();
        }, 0);
    };
    BaseAudioPlayerFunctions.prototype.toggleVolume = function () {
        if (this.volume === 0) {
            this.setVolume(1.0);
        }
        else {
            this.setVolume(0);
        }
    };
    BaseAudioPlayerFunctions.prototype.setVolume = function (vol) {
        this.volume = vol;
        this.player.nativeElement.volume = this.volume;
    };
    __decorate([
        ViewChild('audioPlayer', { static: true }),
        __metadata("design:type", ElementRef)
    ], BaseAudioPlayerFunctions.prototype, "player", void 0);
    return BaseAudioPlayerFunctions;
}());

var MatAdvancedAudioPlayerComponent = /** @class */ (function (_super) {
    __extends(MatAdvancedAudioPlayerComponent, _super);
    function MatAdvancedAudioPlayerComponent(playlistService) {
        var _this = _super.call(this) || this;
        _this.playlistService = playlistService;
        _this.displayedColumns = ['title', 'status'];
        _this.dataSource = new MatTableDataSource();
        _this.displayTitle = true;
        _this.displayPlaylist = true;
        _this.pageSizeOptions = [10, 20, 30];
        _this.expanded = true;
        _this.autoPlay = false;
        _this.displayVolumeControls = true;
        return _this;
    }
    MatAdvancedAudioPlayerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setDataSourceAttributes();
        this.bindPlayerEvent();
        this.player.nativeElement.addEventListener('ended', function () {
            if (_this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {
                _this.nextSong();
            }
        });
        this.playlistService.setPlaylist(this.playlistData);
        this.playlistService.getSubjectCurrentTrack().subscribe(function (playlistTrack) {
            _this.playlistTrack = playlistTrack;
        });
        this.player.nativeElement.currentTime = 0;
        this.playlistService.init();
        if (this.autoPlay) {
            _super.prototype.play.call(this);
        }
    };
    Object.defineProperty(MatAdvancedAudioPlayerComponent.prototype, "matPaginator", {
        set: function (mp) {
            this.paginator = mp;
            this.setDataSourceAttributes();
        },
        enumerable: true,
        configurable: true
    });
    MatAdvancedAudioPlayerComponent.prototype.setDataSourceAttributes = function () {
        var index = 1;
        if (this.playlistData) {
            this.playlistData.forEach(function (data) {
                data.index = index++;
            });
            this.dataSource = new MatTableDataSource(this.playlistData);
            this.dataSource.paginator = this.paginator;
        }
    };
    MatAdvancedAudioPlayerComponent.prototype.nextSong = function () {
        if (this.displayPlaylist == true
            && (((this.playlistService.indexSong + 1) % this.paginator.pageSize) === 0
                || (this.playlistService.indexSong + 1) === this.paginator.length)) {
            if (this.paginator.hasNextPage()) {
                this.paginator.nextPage();
            }
            else if (!this.paginator.hasNextPage()) {
                this.paginator.firstPage();
            }
        }
        this.currentTime = 0;
        this.duration = 0.01;
        this.playlistService.nextSong();
        this.play();
    };
    MatAdvancedAudioPlayerComponent.prototype.previousSong = function () {
        this.currentTime = 0;
        this.duration = 0.01;
        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {
            if (this.displayPlaylist == true
                && (((this.playlistService.indexSong) % this.paginator.pageSize) === 0
                    || (this.playlistService.indexSong) === 0)) {
                if (this.paginator.hasPreviousPage()) {
                    this.paginator.previousPage();
                }
                else if (!this.paginator.hasPreviousPage()) {
                    this.paginator.lastPage();
                }
            }
            this.playlistService.previousSong();
        }
        else {
            this.resetSong();
        }
        this.play();
    };
    MatAdvancedAudioPlayerComponent.prototype.resetSong = function () {
        this.player.nativeElement.src = this.playlistTrack[1].link;
    };
    MatAdvancedAudioPlayerComponent.prototype.selectTrack = function (index) {
        var _this = this;
        console.log('selectTrack(index: number): void: ' + index);
        this.playlistService.selectATrack(index);
        setTimeout(function () {
            _this.player.nativeElement.play();
        }, 0);
    };
    MatAdvancedAudioPlayerComponent.prototype.checkIfSongHasStartedSinceAtleastTwoSeconds = function () {
        return this.player.nativeElement.currentTime > 2;
    };
    Object.defineProperty(MatAdvancedAudioPlayerComponent.prototype, "playlist", {
        set: function (playlist) {
            this.playlistData = playlist;
            this.ngOnInit();
        },
        enumerable: true,
        configurable: true
    });
    MatAdvancedAudioPlayerComponent.ctorParameters = function () { return [
        { type: AudioPlayerService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatAdvancedAudioPlayerComponent.prototype, "displayTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatAdvancedAudioPlayerComponent.prototype, "displayPlaylist", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatAdvancedAudioPlayerComponent.prototype, "pageSizeOptions", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatAdvancedAudioPlayerComponent.prototype, "expanded", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatAdvancedAudioPlayerComponent.prototype, "autoPlay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatAdvancedAudioPlayerComponent.prototype, "displayVolumeControls", void 0);
    __decorate([
        ViewChild(MatPaginator, { static: false }),
        __metadata("design:type", MatPaginator),
        __metadata("design:paramtypes", [MatPaginator])
    ], MatAdvancedAudioPlayerComponent.prototype, "matPaginator", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], MatAdvancedAudioPlayerComponent.prototype, "playlist", null);
    MatAdvancedAudioPlayerComponent = __decorate([
        Component({
            selector: 'mat-advanced-audio-player',
            template: "<mat-card class=\"d-flex justify-content-center ngx-advanced-audio-player z-depth-1 mat-elevation-z2\" style=\"margin: 0px;\">\n  \n  <audio [src]=\"playlistTrack[1].link\" #audioPlayer></audio>\n\n    <button class=\"p-1\" mat-button (click)='previousSong();'\n      [disabled]=\"loaderDisplay\">\n      <mat-icon aria-hidden=\"true\">\n        <!-- Skip previous icon (skip_previous) -->\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"/><path d=\"M0 0h32v32H0z\" fill=\"none\"/></svg>\n      </mat-icon>\n    </button>\n    <button mat-button class=\"p-1 play-pause\" (click)='playBtnHandler();' [disabled]=\"loaderDisplay\">\n        <mat-icon *ngIf=\"!loaderDisplay && !isPlaying\" class=\"play-track\" aria-hidden=\"true\">\n          <!-- Play icon (play_arrow) -->\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n        </mat-icon>\n        <mat-icon *ngIf=\"!loaderDisplay && isPlaying\" class=\"pause-track\" aria-hidden=\"true\">\n          <!-- Pause icon (pause) -->\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n        </mat-icon>\n    </button>\n    <button mat-button class=\"p-1 skip-next\" (click)='nextSong();' [disabled]=\"loaderDisplay\">\n      <mat-icon class=\"next-track\" aria-hidden=\"true\">\n        <!-- Skip next icon (skip_next) -->\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n      </mat-icon>\n    </button>\n\n  <div class=\"col\">\n    <div class=\"d-flex flex-fill justify-content-center\">\n      <div class=\"d-none d-sm-block py-3 px-1\" style=\"font-size: 12px\">\n        <span *ngIf=\"duration !== 0.01\">\n          {{currentTime | secondsToMinutes}}\n        </span>\n      </div>\n      <mat-slider class=\"d-none d-sm-block flex-fill p-1\" style=\"width: 100%\" min=\"0\" max=\"{{duration}}\" value=\"{{currentTime}}\"\n        (change)=\"currTimePosChanged($event)\"></mat-slider>\n\n      <div class=\"py-3 px-1\" style=\"font-size: 12px; text-align: right\">\n        <span *ngIf=\"duration !== 0.01\">\n          -{{duration-currentTime | secondsToMinutes }}\n        </span>\n      </div>\n    </div>\n  </div>\n  <button *ngIf=\"displayVolumeControls\" mat-button class=\"p-1 volume\" (click)='toggleVolume();'>\n    <mat-icon *ngIf=\"volume === 0\" class=\"volume-mute\" aria-hidden=\"true\">\n      <!-- Volume mute icon (volume_off) -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n    </mat-icon>\n    <mat-icon *ngIf=\"volume > 0\" class=\"volume-up\" aria-hidden=\"true\">\n      <!-- Volume up icon (volume_up) -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n    </mat-icon>\n  </button>\n</mat-card>\n\n<mat-card *ngIf=\"displayTitle\" class=\"mat-elevation-z1\">\n  <div style=\"text-align: center;\">\n    <div style=\"margin: 1px 2px; padding: 1em\">\n      <span *ngIf=\"!isPlaying\">{{ playlistTrack[1].title }}</span>\n      <marquee *ngIf=\"isPlaying\" behavior=\"scroll\" direction=\"left\">{{ playlistTrack[1].title }}</marquee>\n    </div>\n    <div class=\"clear\"></div>\n  </div>\n</mat-card>\n\n<mat-accordion *ngIf=\"displayPlaylist\">\n  <mat-expansion-panel [expanded]=\"expanded\">\n    <mat-expansion-panel-header>\n      Play List\n    </mat-expansion-panel-header>\n    <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z6\">\n      <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef> Title </th>\n        <td mat-cell *matCellDef=\"let element\" (click)=\"selectTrack(element.index)\"> {{element.title}} </td>\n      </ng-container>\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> </th>\n        <td mat-cell *matCellDef=\"let element\">\n          <div *ngIf=\"playlistTrack[1].title === element.title\">\n            <!-- <mat-icon *ngIf=\"isPlaying\" aria-hidden=\"true\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n            </mat-icon> -->\n            <mat-icon class=\"currently-playing\" *ngIf=\"isPlaying\" aria-hidden=\"true\">\n              <!-- Play icon (play_arrow) -->\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 3v9.28c-.47-.17-.97-.28-1.5-.28C8.01 12 6 14.01 6 16.5S8.01 21 10.5 21c2.31 0 4.2-1.75 4.45-4H15V6h4V3h-7z\"/></svg>\n            </mat-icon>\n          </div>\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr class=\"mat-select-content\" mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" showFirstLastButtons></mat-paginator>\n  </mat-expansion-panel>\n</mat-accordion>",
            styles: ["@import url(https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/css/bootstrap-grid.min.css);mat-card{padding:0!important;background:rgba(0,0,0,.02)}mat-slider{max-height:30px}table{width:100%}button:focus,button:hover{outline:0!important}.ngx-advanced-audio-player{min-width:325px}.mat-icon{height:32px!important;width:32px!important}.material-icons{font-size:16px!important}mat-icon>.currently-playing{height:16px!important;width:16px!important}.play-pause{border-left:2px solid rgba(0,0,0,.1);border-right:2px solid rgba(0,0,0,.1)}.volume{border-left:2px solid rgba(0,0,0,.1)}.skip-next{border-right:2px solid rgba(0,0,0,.1)}"]
        }),
        __metadata("design:paramtypes", [AudioPlayerService])
    ], MatAdvancedAudioPlayerComponent);
    return MatAdvancedAudioPlayerComponent;
}(BaseAudioPlayerFunctions));

var MatBasicAudioPlayerComponent = /** @class */ (function (_super) {
    __extends(MatBasicAudioPlayerComponent, _super);
    function MatBasicAudioPlayerComponent() {
        var _this = _super.call(this) || this;
        _this.displayTitle = false;
        _this.autoPlay = false;
        _this.displayVolumeControls = true;
        return _this;
    }
    MatBasicAudioPlayerComponent.prototype.ngOnInit = function () {
        this.bindPlayerEvent();
        if (this.autoPlay) {
            _super.prototype.play.call(this);
        }
    };
    MatBasicAudioPlayerComponent.prototype.resetSong = function () {
        this.player.nativeElement.src = this.audioUrl;
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MatBasicAudioPlayerComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MatBasicAudioPlayerComponent.prototype, "audioUrl", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatBasicAudioPlayerComponent.prototype, "displayTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatBasicAudioPlayerComponent.prototype, "autoPlay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MatBasicAudioPlayerComponent.prototype, "displayVolumeControls", void 0);
    MatBasicAudioPlayerComponent = __decorate([
        Component({
            selector: 'mat-basic-audio-player',
            template: "<mat-card class=\"d-flex ngx-basic-audio-player z-depth-1 mat-elevation-z1\">\n    <audio [src]=\"audioUrl\" #audioPlayer></audio>\n    <button mat-button (click)='playBtnHandler();' class=\"ngx-basic-audio-player-button-handler\"\n        style=\"font-size: 14px!important;\" [disabled]=\"loaderDisplay\">\n            <mat-icon *ngIf=\"!loaderDisplay && !isPlaying\" class=\"play-track\" aria-hidden=\"true\">\n                <!-- Play icon (play_arrow) -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M8 5v14l11-7z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n            </mat-icon>\n            <mat-icon *ngIf=\"!loaderDisplay && isPlaying\" class=\"pause-track\" aria-hidden=\"true\">\n                <!-- Pause icon (pause) -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n            </mat-icon>\n    </button>\n    <div class=\"flex-fill pl-1 ngx-basic-audio-player-slider\">\n        <mat-slider style=\"width: 100%\" min=\"0\" max=\"{{duration}}\" value=\"{{currentTime}}\"\n            (change)=\"currTimePosChanged($event)\"></mat-slider>\n    </div>\n    <div class=\"d-flex ngx-basic-audio-player-duration\">\n        <span *ngIf=\"duration !== 0.01\" class=\"pl-2 pr-3 my-auto\" style=\"font-size: 14px!important;\">\n            -{{duration-currentTime |\n            secondsToMinutes }}\n        </span>\n    </div>\n    <button *ngIf=\"displayVolumeControls\" mat-button (click)='toggleVolume();'\n        style=\"padding: 0px!important; min-width:48px!important;\">\n        <mat-icon *ngIf=\"volume === 0\" class=\"volume-mute\" aria-hidden=\"true\">\n            <!-- Volume mute icon (volume_off) -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n          </mat-icon>\n          <mat-icon *ngIf=\"volume > 0\" class=\"volume-up\" aria-hidden=\"true\">\n            <!-- Volume up icon (volume_up) -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\"><path d=\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n          </mat-icon>\n    </button>\n</mat-card>\n\n<mat-card class=\"z-depth-1 mat-elevation-z1\" *ngIf=\"displayTitle && title !== ''\">\n    <div style=\"text-align: center;\">\n        <div style=\"margin: 1px 2px; padding: 1em\">\n            {{ title }}\n        </div>\n    </div>\n</mat-card>",
            styles: ["@import url(https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/css/bootstrap-grid.min.css);mat-card,mat-slider{padding:0!important}button:focus,button:hover{outline:0!important}.ngx-basic-audio-player{min-width:300px}svg{vertical-align:top}.mat-icon{height:32px!important;width:32px!important}.material-icons{font-size:32px!important}mat-card{background:rgba(0,0,0,.02)}"]
        }),
        __metadata("design:paramtypes", [])
    ], MatBasicAudioPlayerComponent);
    return MatBasicAudioPlayerComponent;
}(BaseAudioPlayerFunctions));

/*
 * Transform seconds to minutes:seconds
 * Example : 270 -> 02:30
*/
var SecondsToMinutesPipe = /** @class */ (function () {
    function SecondsToMinutesPipe() {
    }
    SecondsToMinutesPipe.prototype.transform = function (time) {
        var minutes = ('0' + Math.floor(time / 60)).slice(-2);
        var seconds = ('0' + time % 60).slice(-2);
        return minutes + ":" + seconds;
    };
    SecondsToMinutesPipe = __decorate([
        Pipe({ name: 'secondsToMinutes' })
    ], SecondsToMinutesPipe);
    return SecondsToMinutesPipe;
}());

var NgxAudioPlayerModule = /** @class */ (function () {
    function NgxAudioPlayerModule() {
    }
    NgxAudioPlayerModule = __decorate([
        NgModule({
            declarations: [MatBasicAudioPlayerComponent, SecondsToMinutesPipe, MatAdvancedAudioPlayerComponent],
            imports: [CommonModule, FormsModule, MatButtonModule, MatCardModule, MatTableModule, MatFormFieldModule,
                MatSliderModule, MatExpansionModule, MatPaginatorModule, MatIconModule],
            exports: [MatBasicAudioPlayerComponent, MatAdvancedAudioPlayerComponent],
            providers: [AudioPlayerService]
        }),
        __metadata("design:paramtypes", [])
    ], NgxAudioPlayerModule);
    return NgxAudioPlayerModule;
}());

var Track = /** @class */ (function () {
    function Track() {
    }
    return Track;
}());

/*
 * Public API Surface of ngx-audio-player
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MatAdvancedAudioPlayerComponent, MatBasicAudioPlayerComponent, NgxAudioPlayerModule, Track, BaseAudioPlayerFunctions as ɵa, AudioPlayerService as ɵb, SecondsToMinutesPipe as ɵc };
//# sourceMappingURL=ngx-audio-player.js.map
